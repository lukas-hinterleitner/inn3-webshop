{"version":3,"sources":["./src/app/pages/login/login.module.ts","./src/app/pages/login/login.page.scss","./src/app/pages/login/login.page.html","./src/app/pages/login/login-routing.module.ts","./src/app/pages/login/login.page.ts"],"names":[],"mappings":"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","file":"pages-login-login-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        LoginPageRoutingModule,\n        ReactiveFormsModule\n    ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \".error-message {\\n  color: var(--ion-color-danger);\\n  font-size: 0.85em;\\n}\\n\\n.validation-errors {\\n  padding-top: 3px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvbG9naW4vbG9naW4ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsOEJBQUE7RUFDQSxpQkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7QUFDRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5lcnJvci1tZXNzYWdlIHtcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1kYW5nZXIpO1xuICBmb250LXNpemU6IDAuODVlbTtcbn1cblxuLnZhbGlkYXRpb24tZXJyb3JzIHtcbiAgcGFkZGluZy10b3A6IDNweDtcbn1cbiJdfQ== */\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-row>\\n            <ion-menu-button></ion-menu-button>\\n            <ion-title>Login</ion-title>\\n        </ion-row>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\" [noValidate]=\\\"false\\\">\\n        <ion-row class=\\\"ion-justify-content-center\\\">\\n            <ion-col size-lg=\\\"6\\\" size-md=\\\"9\\\">\\n                <ion-item>\\n                    <ion-label position=\\\"floating\\\">Email</ion-label>\\n                    <ion-input name=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n                </ion-item>\\n                <div class=\\\"validation-errors\\\">\\n                    <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"loginForm.get('email').hasError(validation.type) &&\\n                                                          (loginForm.get('email').dirty || loginForm.get('email').touched)\\\">\\n                            {{ validation.message }}\\n                        </div>\\n                    </ng-container>\\n                </div>\\n            </ion-col>\\n        </ion-row>\\n\\n        <ion-row class=\\\"ion-justify-content-center\\\">\\n            <ion-col size-lg=\\\"6\\\" size-md=\\\"9\\\">\\n                <ion-item>\\n                    <ion-label position=\\\"floating\\\">Password</ion-label>\\n                    <ion-input name=\\\"password\\\" formControlName=\\\"password\\\" type=\\\"password\\\"></ion-input>\\n                </ion-item>\\n                <div class=\\\"validation-errors\\\">\\n                    <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"loginForm.get('password').hasError(validation.type) &&\\n                                                          (loginForm.get('password').dirty || loginForm.get('password').touched)\\\">\\n                            {{ validation.message }}\\n                        </div>\\n                    </ng-container>\\n                </div>\\n            </ion-col>\\n        </ion-row>\\n\\n        <ion-row class=\\\"ion-justify-content-center\\\">\\n            <ion-col size-lg=\\\"6\\\" size-md=\\\"9\\\">\\n                <ion-button shape=\\\"round\\\" type=\\\"submit\\\" expand=\\\"full\\\" color=\\\"primary\\\">Login</ion-button>\\n            </ion-col>\\n        </ion-row>\\n    </form>\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import {Component, OnInit} from '@angular/core';\nimport {AuthenticationService} from '../../services/authentication.service';\n\nimport {Router} from '@angular/router';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\nimport {LoadingService} from '../../services/loading.service';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.page.html',\n    styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n    public loginForm: FormGroup;\n\n    public validation_messages = {\n        email: [\n            { type: 'required', message: 'Email is required.' },\n            { type: 'email', message: 'Wrong email format.' },\n        ],\n        password: [\n            { type: 'required', message: 'Password is required.' }\n        ],\n    };\n\n    constructor(private authenticationService: AuthenticationService, private router: Router, private formBuilder: FormBuilder,\n                private loadingService: LoadingService) {\n        // create form group\n        this.loginForm = this.formBuilder.group({\n            email: ['', Validators.compose([\n                                                        Validators.required,\n                                                        Validators.email,\n                                                    ])],\n            password: ['', Validators.compose([\n                                                        Validators.minLength(8),\n                                                        Validators.required,\n                                                    ])]\n        });\n    }\n\n    ngOnInit() {\n    }\n\n    async login() {\n        await this.loadingService.showLoading();\n\n        if (this.loginForm.valid) {\n            const email = this.loginForm.get('email').value;\n            const password = this.loginForm.get('password').value;\n\n            // TODO encryption\n            // TODO password hashing\n            // TODO get userdata from server\n\n            await this.authenticationService.login(email);\n            await this.router.navigate(['/user/general']);\n        } else {\n            // TODO view error messages\n            this.loginForm.markAllAsTouched();\n        }\n\n        await this.loadingService.closeLoading();\n    }\n}\n"],"sourceRoot":"webpack:///"}