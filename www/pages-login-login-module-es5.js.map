{"version":3,"sources":["webpack:///src/app/pages/login/login.module.ts","webpack:///src/app/pages/login/login.page.scss","webpack:///src/app/pages/login/login.page.html","webpack:///src/app/pages/login/login-routing.module.ts","webpack:///src/app/pages/login/login.page.ts"],"names":["LoginPageModule","imports","declarations","routes","path","component","LoginPageRoutingModule","forChild","exports","LoginPage","authenticationService","router","formBuilder","loadingService","validation_messages","email","type","message","password","loginForm","group","compose","required","minLength","showLoading","valid","get","value","login","navigate","markAllAsTouched","closeLoading","selector","template"],"mappings":"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","file":"pages-login-login-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        LoginPageRoutingModule,\n        ReactiveFormsModule\n    ],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n","export default \".error-message {\\n  color: var(--ion-color-danger);\\n  font-size: 0.85em;\\n}\\n\\n.validation-errors {\\n  padding-top: 3px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvbG9naW4vbG9naW4ucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsOEJBQUE7RUFDQSxpQkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7QUFDRiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2xvZ2luL2xvZ2luLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5lcnJvci1tZXNzYWdlIHtcbiAgY29sb3I6IHZhcigtLWlvbi1jb2xvci1kYW5nZXIpO1xuICBmb250LXNpemU6IDAuODVlbTtcbn1cblxuLnZhbGlkYXRpb24tZXJyb3JzIHtcbiAgcGFkZGluZy10b3A6IDNweDtcbn1cbiJdfQ== */\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-row>\\n            <ion-menu-button></ion-menu-button>\\n            <ion-title>Login</ion-title>\\n        </ion-row>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"ion-padding\\\">\\n    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"login()\\\" [noValidate]=\\\"false\\\">\\n        <ion-row class=\\\"ion-justify-content-center\\\">\\n            <ion-col size-lg=\\\"6\\\" size-md=\\\"9\\\">\\n                <ion-item>\\n                    <ion-label position=\\\"floating\\\">Email</ion-label>\\n                    <ion-input name=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\n                </ion-item>\\n                <div class=\\\"validation-errors\\\">\\n                    <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"loginForm.get('email').hasError(validation.type) &&\\n                                                          (loginForm.get('email').dirty || loginForm.get('email').touched)\\\">\\n                            {{ validation.message }}\\n                        </div>\\n                    </ng-container>\\n                </div>\\n            </ion-col>\\n        </ion-row>\\n\\n        <ion-row class=\\\"ion-justify-content-center\\\">\\n            <ion-col size-lg=\\\"6\\\" size-md=\\\"9\\\">\\n                <ion-item>\\n                    <ion-label position=\\\"floating\\\">Password</ion-label>\\n                    <ion-input name=\\\"password\\\" formControlName=\\\"password\\\" type=\\\"password\\\"></ion-input>\\n                </ion-item>\\n                <div class=\\\"validation-errors\\\">\\n                    <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n                        <div class=\\\"error-message\\\" *ngIf=\\\"loginForm.get('password').hasError(validation.type) &&\\n                                                          (loginForm.get('password').dirty || loginForm.get('password').touched)\\\">\\n                            {{ validation.message }}\\n                        </div>\\n                    </ng-container>\\n                </div>\\n            </ion-col>\\n        </ion-row>\\n\\n        <ion-row class=\\\"ion-justify-content-center\\\">\\n            <ion-col size-lg=\\\"6\\\" size-md=\\\"9\\\">\\n                <ion-button shape=\\\"round\\\" type=\\\"submit\\\" expand=\\\"full\\\" color=\\\"primary\\\">Login</ion-button>\\n            </ion-col>\\n        </ion-row>\\n    </form>\\n\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n","import {Component, OnInit} from '@angular/core';\nimport {AuthenticationService} from '../../services/authentication.service';\n\nimport {Router} from '@angular/router';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\nimport {LoadingService} from '../../services/loading.service';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.page.html',\n    styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage implements OnInit {\n    public loginForm: FormGroup;\n\n    public validation_messages = {\n        email: [\n            { type: 'required', message: 'Email is required.' },\n            { type: 'email', message: 'Wrong email format.' },\n        ],\n        password: [\n            { type: 'required', message: 'Password is required.' }\n        ],\n    };\n\n    constructor(private authenticationService: AuthenticationService, private router: Router, private formBuilder: FormBuilder,\n                private loadingService: LoadingService) {\n        // create form group\n        this.loginForm = this.formBuilder.group({\n            email: ['', Validators.compose([\n                                                        Validators.required,\n                                                        Validators.email,\n                                                    ])],\n            password: ['', Validators.compose([\n                                                        Validators.minLength(8),\n                                                        Validators.required,\n                                                    ])]\n        });\n    }\n\n    ngOnInit() {\n    }\n\n    async login() {\n        await this.loadingService.showLoading();\n\n        if (this.loginForm.valid) {\n            const email = this.loginForm.get('email').value;\n            const password = this.loginForm.get('password').value;\n\n            // TODO encryption\n            // TODO password hashing\n            // TODO get userdata from server\n\n            await this.authenticationService.login(email);\n            await this.router.navigate(['/user/general']);\n        } else {\n            // TODO view error messages\n            this.loginForm.markAllAsTouched();\n        }\n\n        await this.loadingService.closeLoading();\n    }\n}\n"]}